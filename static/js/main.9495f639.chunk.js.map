{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","current_chain","available_to_choose_from","current_selection","_this2","reqwest","url","headers","Accept","Access-Control-Allow-Headers","method","error","err","success","resp","create_markov","results","markov_options","forEach","result","i","indexes_of_next_choice","data","joke","push","setState","selection","Math","random","index","next_choice","new_current_chain","slice","map","past_joke","react_default","a","createElement","style","fontSize","_this3","className","onClick","render_next_joke","render_current_chain","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2IAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sNC4FzBC,cAtFb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,cAAe,GACfC,yBAA0B,GAC1BC,kBAAmB,MALVV,oFASO,IAAAW,EAAAR,KAClBS,IAAQ,CACNC,IAAK,oCACHC,QAAS,CACTC,OAAU,mBACVC,+BAAgC,KAC3BC,OAAQ,MACfC,MAAO,SAAUC,KACjBC,QAAS,SAACC,GACRV,EAAKW,cAAcD,EAAKE,kDAKhBA,GACZ,IAAIC,EAAiB,GACrBD,EAAQE,QAAQ,SAACC,EAAQC,GACvB,IAAMC,EAAyB,EAAGD,EAAI,GAAK,IAAKA,EAAI,GAAK,IAAKA,EAAI,GAAK,IAEjEE,EAAO,CAAEC,KADFJ,EAAOI,KACCF,yBAAwBD,KAC7CH,EAAeO,KAAKF,KAEtB1B,KAAK6B,SAAS,CACZxB,cAAe,CAACgB,EAAe,IAC/Bf,yBAA0Be,EAC1Bd,kBAAmBc,EAAe,gDAMpC,IAAMS,EAAYC,KAAKC,SACjBP,EAAyBzB,KAAKI,MAAMG,kBAAkBkB,uBAC5D,GAAGK,GAAa,GACd,IAAIG,EAAQR,EAAuB,QAC9B,GAAIK,GAAa,GAClBG,EAAQR,EAAuB,QAC9B,GAAIK,GAAa,EAClBG,EAAQR,EAAuB,GAErC,IAAMS,EAAclC,KAAKI,MAAME,yBAAyB2B,GACpDE,EAAoBnC,KAAKI,MAAMC,cAAc+B,QACjDD,EAAkBP,KAAKM,GACvBlC,KAAK6B,SAAS,CAAEtB,kBAAmB2B,EAAa7B,cAAe8B,mDAI/D,OAAOnC,KAAKI,MAAMC,cAAcgC,IAAK,SAAAC,GAAS,OAC5CC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,SAAU,QACpBL,EAAUX,KADb,KACqBW,EAAUd,EAD/B,2CAQK,IAAAoB,EAAA5C,KACAO,EAAqBP,KAAKI,MAA1BG,kBACP,OACEgC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAChBN,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAA,SACGlC,GAAqBA,EAAkBoB,MAE1CY,EAAAC,EAAAC,cAAA,UAAQK,QAAS,kBAAMF,EAAKG,qBAA5B,aAGAR,EAAAC,EAAAC,cAAA,SACGzC,KAAKgD,iCA/EAC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9495f639.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport reqwest from 'reqwest'\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      current_chain: [],\n      available_to_choose_from: [],\n      current_selection: null\n    }\n  }\n\n  componentWillMount(){\n    reqwest({\n      url: 'https://icanhazdadjoke.com/search'\n      , headers: {\n        'Accept': 'application/json',\n        'Access-Control-Allow-Headers': '*'\n      }    , method: 'get'\n    , error: function (err) { }\n    , success: (resp) => {\n        this.create_markov(resp.results)\n     }\n    })\n  }\n\n  create_markov(results){\n    let markov_options = []\n    results.forEach((result, i) => {\n      const indexes_of_next_choice = [ (i + 1) % 20, (i + 2) % 20, (i + 3) % 20 ]\n      const joke = result.joke\n      const data = { joke, indexes_of_next_choice, i}\n      markov_options.push(data)\n    })\n    this.setState({\n      current_chain: [markov_options[0]],\n      available_to_choose_from: markov_options,\n      current_selection: markov_options[0]\n    })\n\n  }\n\n  render_next_joke(){\n    const selection = Math.random()\n    const indexes_of_next_choice = this.state.current_selection.indexes_of_next_choice\n    if(selection <= .3) {\n      var index = indexes_of_next_choice[0]\n    } else if (selection <= .6) {\n      var index = indexes_of_next_choice[1]\n    } else if (selection <= 1) {\n      var index = indexes_of_next_choice[2]\n    }\n    const next_choice = this.state.available_to_choose_from[index]\n    let new_current_chain = this.state.current_chain.slice()\n    new_current_chain.push(next_choice)\n    this.setState({ current_selection: next_choice, current_chain: new_current_chain})\n  }\n\n  render_current_chain(){\n    return this.state.current_chain.map((past_joke => (\n      <div style={{fontSize: '8px'}}>\n        {past_joke.joke}(#{past_joke.i})\n        =>\n      </div>\n    )))\n  }\n\n\n  render() {\n   const  {current_selection} = this.state\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>Dad Joke Markov Chain</h3>\n          <p>\n            {current_selection && current_selection.joke}\n          </p>\n          <button onClick={() => this.render_next_joke()}>\n            Next Joke\n          </button>\n          <p>\n            {this.render_current_chain()}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}